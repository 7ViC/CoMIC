const vrchat = require("vrchat");
const axios = require('axios');
const fs = require('fs')
var path = require('path');
const createCsvWriter = require('csv-writer').createObjectCsvWriter;
const AuthenticationApi = new vrchat.AuthenticationApi(configuration, undefined, axiosConfiguration);
const UsersApi = new vrchat.UsersApi(configuration, undefined, axiosConfiguration);
const { setTimeout: setTimeoutPromise } = require('node:timers/promises');
const totp = require("totp-generator");

const configuration = new vrchat.Configuration({
    //Add Your login information.
    username :  'Username',
    password : 'Password'
});

const axiosConfiguration = axios.create({
    //Add User-Agent 
    headers: {
        'User-Agent': '"AddApplicationName"/1.0 "AddYourEmail"'
    }
})

var dateTimeStamp=Date.now();
var dateObject= new Date(dateTimeStamp);
var year= dateObject.getUTCFullYear();
var month= dateObject.getUTCMonth() + 1;
var day= dateObject.getUTCDate();
var hour= dateObject.getUTCHours();
var min = dateObject.getMinutes()

let instancePath = `/home/user/Documents/data/users/activity/player-activity-${year}-${month}-${day}-${hour}-${min}.csv`


const csvWriter = createCsvWriter({

    path: instancePath,
    header:['id',"last_platform","last_activity","world_id","instance_id", 'data' ]
})

const call = async()=>{
    let login = await AuthenticationApi.getCurrentUser()
    const token = totp("addToken")
    const ver = await AuthenticationApi.verify2FA({"code":token})
    login = await AuthenticationApi.getCurrentUser()
    let activeFriends = login.data.onlineFriends
    let max_busted_calls = 7
    let curr_call = 0  
    let save_data = [] 
    for(let friend of activeFriends){
        
        if(curr_call == max_busted_calls){
            curr_call = 0
            await setTimeoutPromise(4000, "food")
        }
        curr_call++ 
        try{
            let play_activity = await UsersApi.getUser(friend, undefined)
            if(play_activity.status === 200){
                save_data.push({
                    "id":friend, 
                    "last_login": play_activity.data.last_login,
                    "last_platform": play_activity.data.last_platform,
                    "last_activity": play_activity.data.last_activity,
                    "world_id": play_activity.data.worldId,
                    "instance_id": play_activity.data.instanceId, 
                    'location': play_activity.data.location,
                    "date_joined":play_activity.data.date_joined, 
                    "curr_avatarUrl" : play_activity.data.currentAvatarImageUrl,
                    "curr_avatarThumbnail": play_activity.data.currentAvatarThumbnailImageUrl,
                    "tags": play_activity.data.tags

                })
            }   
            else if(play_activity.status === 429) await setTimeoutPromise(10000, "food")
        }
        catch{
            await setTimeoutPromise(10000, "food")
        }

    }
    await csvWriter.writeRecords(save_data)// returns a promise




    
}

call()


