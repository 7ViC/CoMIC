require('dotenv').config()
const axios = require('axios');
const vrchat = require("vrchat");
const totp = require("totp-generator");
const createCsvWriter =require('csv-writer').createObjectCsvWriter;
const AuthenticationApi = new vrchat.AuthenticationApi(configuration,undefined, axiosConfiguration);
const SystemApi = new vrchat.SystemApi(configuration,undefined, axiosConfiguration);
const WorldAPi = new vrchat.WorldsApi(configuration,undefined, axiosConfiguration);
const { setTimeout: setTimeoutPromise } = require('node:timers/promises');

var fs = require("fs");
const configuration = new vrchat.Configuration({
    //Add your login information.
    username :  'username',
    password : 'password'
  
})
const axiosConfiguration = axios.create({
    //Add User-Agent 
    headers: {
        'User-Agent': '"AddApplicationName"/1.0 "AddYourEmail"'
    }
})

let worlds = [];
var dateTimeStamp=Date.now();
var dateObject= new Date(dateTimeStamp);
var yearFromTS= dateObject.getUTCFullYear();
var monthFromTS= dateObject.getUTCMonth() + 1;
var dateFromTS= dateObject.getUTCDate();
var utcTimeFromTS= dateObject.getUTCHours();
//Add your own directory 
const filepath =`/home/user/Document/data/worlds/${yearFromTS}-${monthFromTS}-${dateFromTS}-${utcTimeFromTS}.csv`
const playerpath =`/home/user/Document/data/analyst/playercount/players-${yearFromTS}-${monthFromTS}-${dateFromTS}.csv`

//Create an empty file. csvWriter causes and error when creating a file. 

const csvWriter = createCsvWriter({
    path: filepath,
    header: ['worldid']
  
});


const call = async()=>{
    worlds.push({"worldid":"worldid"})
    let login = await AuthenticationApi.getCurrentUser()

    const token = totp("oratqy2boe4eewkggztum2dyjrzxqqtu");
    const ver = await AuthenticationApi.verify2FA({"code":token})
    login = await AuthenticationApi.getCurrentUser()
    
    const totalPlayers = await SystemApi.getCurrentOnlineUsers()
    //const log = await AuthenticationApi.getCurrentUser()
    //let room = await WorldAPi.getWorldInstance(arr[0], "82025~region(eu)")
    //console.log(room.data)
    let offset = 0
    let playersFound = 0 
    let breakingPoint = 5000//Max offset is 5000
    let mode = true 

    WorldAPi.searchWorlds()
    
    try{


        while(offset != breakingPoint){
           


            try{
              
                let resp;
                //if(offset ==1000) break
                //Most relialble way to get the top 1000 worlds. 
                //Does not work beyond an offset of 1000. 
                if(mode) resp =  await     WorldAPi.searchWorlds(false,undefined, undefined,undefined,n = 100,undefined,offset = offset)
                //This will allows to retrieve almost all the worlds. It's a unreliable. It will have missing worlds. 
                else resp =  await WorldAPi.getActiveWorlds(false,undefined,n = 100,undefined,offset = offset)
                //If the response is empty there is no more worlds to be found. 
                if (resp.data.length === 0 ) break

                //console.log(offset)
                
                resp.data.map(e=>{
                    //All the players that have been found are add up.
                    playersFound+=Number(e.occupants)
                    //Acquire all the worlds id. Make sure it doesn't exist 
                    if(worlds.indexOf({"worldid":String(e.id.trim())}) ===-1) worlds.push({"worldid":String(e.id).trim() })
                })
                offset+=100
                //break//Delete to let the whole script run
                //The API needs a buffer to work reliably 
                await setTimeoutPromise(7000, "food")

                 
             }
            catch(err){
                
                //Allows the script to recover from any errors. 
                mode = false
                await setTimeoutPromise(7000, "food")
            }
        }
        //The worlds that were not found.l
        /*
        let counter = 0  
        for(let id of arr){
            try{
                if(worlds.indexOf({"worldid":id}) <0){
                    console.log("e")
                    let resp = await  WorldAPi.getWorld(id)

                    counter++ 
                    if(counter ===30){
                        counter =0
                        await setTimeoutPromise(2000, "food")
    
                    }
                    worlds.push({"worldid":id})
                
                    playersFound+=Number(resp.data.occupants)
                }
           
            }
            catch(err) {
                if(worlds.indexOf({"worldid":id}) === -1) worlds.push({"worldid":id })
            }
       

        } 
        **/
    
        
        const finalTotal = await SystemApi.getCurrentOnlineUsers()
        csvWriter.writeRecords(worlds)// returns a promise
        .then(()=>{
        console.log(`Done:${worlds.length}:${playersFound}:${totalPlayers.data}:${finalTotal.data}`, '');
        })
        //header: ['current_players', 'players_found', 'worlds_found']
        /** 
        playerWriter.writeRecords([{
            'current_players':totalPlayers.data,
            'players_found':playersFound, 
            'worlds_found':worlds.length,
            'time':dateTimeStamp
        }])*/
        //console.log(worlds.length)
    }
    catch(err){
        console.log(err)
    }
}
//Recovering from any issues. 
while(true){
    try{
        call()
        break;
    }
    catch{}
}