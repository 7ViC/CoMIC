const vrchat = require("vrchat");
const axios = require('axios');
const fs = require('fs')
var path = require('path');
const {parse} = require('csv-parse');
const createCsvWriter = require('csv-writer').createObjectCsvWriter;
const AuthenticationApi = new vrchat.AuthenticationApi(configuration, undefined, axiosConfiguration);
const WorldAPi = new vrchat.WorldsApi(configuration, undefined, axiosConfiguration);
const { setTimeout: setTimeoutPromise } = require('node:timers/promises');
const totp = require("totp-generator");

const configuration = new vrchat.Configuration({
    //Add Your login information.
    username :  'Username',
    password : 'Password'
});

const axiosConfiguration = axios.create({
    //Add User-Agent 
    headers: {
        'User-Agent': '"AddApplicationName"/1.0 "AddYourEmail"'
    }
})
let arr = []
var dateTimeStamp=Date.now();
var dateObject= new Date(dateTimeStamp);
var yearFromTS= dateObject.getUTCFullYear();
var monthFromTS= dateObject.getUTCMonth() + 1;
var dateFromTS= dateObject.getUTCDate();
var utcTimeFromTS= dateObject.getUTCHours();
let absolutePath;
let instancePath;
let worldPath 
//The path has to be were the calling script is located.

absolutePath = path.resolve(`data/worlds/${yearFromTS}-${monthFromTS}-${dateFromTS}-${utcTimeFromTS}.csv`);
instancePath = `/home/user/Documents/data/hourlydata/instances/instances-data-${yearFromTS}-${monthFromTS}-${dateFromTS}-${utcTimeFromTS}.csv`
worldPath = `/home/user/Documents/data/hourlydata/worlds/worlds-data-${yearFromTS}-${monthFromTS}-${dateFromTS}-${utcTimeFromTS}.csv`


 
let worldData = []


const csvWriter = createCsvWriter({
        path: instancePath,
    header: ['worldid','instances', 'type', 'active', 'n_users','capacity', 'permanent','region','standalonewindows','android',
    'location','ownerID','tags','full','secureName','shortName','canRequestInvite','strict','photonRegion','private', 'time']
      
    });
    const csvWorld = createCsvWriter({
        path: worldPath,
     header: ['worldid','name', 'description', 'authorid', 'authorName', 'publication', 'capacity','visits', 'popularity', 'heat', 'public', 'private', 'occupants', 'n_instances','androidSupport','windowSupport', 
    ,'namespace','featured','releasedStatus','version','organization','previewYoutubeID','created_at','update_at','labsPublicationDate',
    'imagesUrl','unityPackages','tags','time']      
    });
fs.createReadStream(absolutePath)
.pipe(parse({ delimiter: ",", from_line: 2 }))
.on("data", function (row) {
    arr.push(String(row[0]))

})
const call = async()=>{
    let login = await AuthenticationApi.getCurrentUser()
    const token = totp("addToken")
    const ver = await AuthenticationApi.verify2FA({"code":token})
    login = await AuthenticationApi.getCurrentUser()
  
        let counter = 0;

        let insList = []
        for(let id of arr){
            try{
                let world = await  WorldAPi.getWorld(id);
        
            
                counter++
                if(counter === 30){
                    counter = 0
                    await setTimeoutPromise(2000, "food")
                }
                if(world.status ===200){
                    let windows = 0, android = 0
                    /** *
                    for(let data of world.data.unityPackages ){
                        if(String(data.platform).trim() ==="android") android++
                        else windows++
                    }*/
                    //        header: ['worldid','instancesid', 'type', 'active', 'n_users','capacity', 'oermanent','region','standalonewindows','android','time']
                    let unityPackages= JSON.stringify( world.data.unityPackages)
                    world.data.unityPackages.map((e)=>{
                        unityPackages+=String(e)+":"
                    })
                    let info = {
                        "worldid": world.data.id,
                        "name": world.data.name, 
                        "description": world.data.description, 
                        "authorid":world.data.authorId,
                        "authorName":world.data.authorName,
                        "publication":String(world.data.publicationDate),
                        "capacity":world.data.capacity, 
                        "visits":world.data.visits, 
                        "popularity": world.data.popularity,
                        "heat":world.data.heat, 
                        "public":world.data.publicOccupants,
                        "private":world.data.privateOccupants, 
                        "occupants":world.data.occupants,
                        "n_instances": world.data.instances.length,
                        "androidSupport": android, 
                        "windowSupport":windows,
                        "namespace":world.data.namespace,
                        "featured":world.data.featured,
                        "releaseStatus":String(world.data.releaseStatus),
                        "version":world.data.version,
                        "organization":world.data.organization,
                        "previewYoutubeID":world.data.previewYoutubeId,
                        "created_at":world.data.created_at,
                        "update_at":world.data.updated_at,
                        "labsPublicationDate":world.data.labsPublicationDate,
                        "imagesUrl":world.data.imageUrl,
                        "unityPackages":unityPackages,
                        "tags":String(world.data.tags),
                        "time":new Date(Date.now())} 
// header: ['worldid','name', 'description', 'authorid', 'authorName', 'publication', 'visits', 'popularity', 'heat', 'public', 'private', 'occupants', 'n_instances','androidSupport','windowSupport', 
//,'namespace','featured','releasedStatus,'version','organization','previewYoutubeID','created_at','update_at','labsPublicationDate',
//'imagesUrl','unityPackages','tags','time']

                     worldData.push(info )
                    for( let instance of world.data.instances){
                        let room = await WorldAPi.getWorldInstance(id, String(instance[0]))
                        

                        counter++
                        if(counter === 30){
                            //break//DELETE
                            counter = 0
                            await setTimeoutPromise(2000, "food")
                        }
                        insList.push({
                            "worldid": room.data.worldId,
                            "instances": room.data.instanceId,
                            "type": room.data.type,
                            "active": room.data.active,
                            "n_users": room.data.n_users,
                            "capacity": room.data.capacity,
                            "permanent": String(room.data.permanent),
                            "region" : room.data.region,
                            "standalonewindows" : room.data.platforms.standalonewindows,
                            "android" : room.data.platforms.android,
                            "location":room.data.location,
                            "ownerID":room.data.ownerId,
                            "tags":String(room.data.tags),
                            "full":room.data.full,
                            "secureName":room.data.secureName,
                            "shortName":room.data.shortName,
                            "canRequestInvite":room.data.canRequestInvite,
                            "strict":room.data.canRequestInvite,
                            "photonRegion":room.data.photonRegion, 
                            "private":String(room.data.private),
                            "time": new Date(Date.now())
                            })
//header: ['worldid','instancesId', 'type', 'active', 'n_users','capacity', 'permanent','region','standalonewindows','android',
//'location','ownerID','tags','full','secureName','shortName','canRequestInvite','strict','photonRegion','private', 'time']

                        

                        /*
                        dict[room.data.instanceId] = room.data.instanceId
                        dict[room.data.type] = room.data.type
                        dict[room.data.active] = room.data.active
                        dict[room.data.n_users] = room.data.n_users
                        dict[room.data.capacity] = room.data.capacity
                        dict[room.data.platforms.android] = room.data.platforms.android
                        dict[room.data.permanent] = room.data.permanent
                        dict[room.data.region] = room.data.region
                        dict[room.data.platforms.standalonewindows] = room.data.platforms.standalonewindows
                        **/
                        //insList.push(dict)
                    
                    }
                }
            }
            catch(error){
              
            }
        }
       //let j = JSON.stringify({instances : insList})
      // console.log(j)
    await csvWriter.writeRecords(insList)// returns a promise
      
    await csvWorld.writeRecords(worldData)
    //console.log(Date.now())
        //timer(60*(60*1000))
    

    
}
//Recovering from any issues. 
while(true){
    try{
        call()
        break;
    }
    catch{}
}
/*

**/
